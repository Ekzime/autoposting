from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from aiogram.types.base import TelegramObject
from aiogram.fsm.context import FSMContext
from typing import Callable, Dict, Any, Awaitable, Union
from telegram.bot.auth.auth_service import AuthService
import logging

logger = logging.getLogger(__name__)

class AuthMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    # –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    PUBLIC_COMMANDS = ['/start', '/login', '/help']
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: Union[Message, CallbackQuery],
        data: Dict[str, Any]
    ) -> Any:
        
        # –ü–æ–ª—É—á–∞–µ–º user_id
        if isinstance(event, Message):
            user_id = event.from_user.id
            username = event.from_user.username
            command = event.text.split()[0] if event.text else ""
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
            username = event.from_user.username
            command = ""
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞–∫ –∞–¥–º–∏–Ω
        if not AuthService.is_admin_allowed(user_id):
            if isinstance(event, Message):
                await event.answer(
                    "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
                    "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.",
                    parse_mode="HTML"
                )
            return  # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if command in self.PUBLIC_COMMANDS:
            return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–æ–≥–∏–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if 'state' in data:
            state: FSMContext = data['state']
            current_state = await state.get_state()
            if current_state and 'waiting_for_password' in current_state:
                return await handler(event, data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        if not AuthService.verify_session(user_id):
            if isinstance(event, Message):
                await event.answer(
                    "üîê <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</b>\n\n"
                    "–í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É.",
                    parse_mode="HTML"
                )
            return  # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return await handler(event, data)