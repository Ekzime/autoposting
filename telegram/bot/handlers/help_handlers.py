import logging
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from sqlalchemy import select
from database.models import SessionLocal, Messages, NewsStatus

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

router = Router()


class ErrorMessagesStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏"""
    waiting_for_action = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (retry/skip/list)
    waiting_for_message_id = State()  # –û–∂–∏–¥–∞–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(Command("help", "commands"))
async def cmd_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /help –∏ /commands –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    commands_text = """
üîç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞</b>

<b>üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Telegram:</b>
/add_account - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç Telegram
/view_accounts - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
/activate_account ID - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID
/deactivate_account ID - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
/delete_account ID - —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç

<b>üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:</b>
/add_source - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
/view_all_sources - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
/update_source ID - –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫
/copy_source - –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –¥—Ä—É–≥–æ–π —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
/delete_source ID - —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞

<b>üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏:</b>
/add_target - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
/all_targets (–∏–ª–∏ /t) - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
/targets_with_sources (–∏–ª–∏ /ts) - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã —Å –∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
/activate_target ID - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
/toggle_target ID - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
/deactivate_target ID - –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
/update_target ID - –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –∫–∞–Ω–∞–ª–µ
/delete_target ID - —É–¥–∞–ª–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª

<b>üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –æ—à–∏–±–∫–∞–º–∏:</b>
/errors - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –æ—à–∏–±–∫–∞–º–∏

<b>‚öôÔ∏è –°–µ—Ä–≤–∏—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/help, /commands - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID, —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–∫–∞—Ö –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤, –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.
"""
    await message.answer(commands_text, parse_mode="HTML")
    logger.info(f"–ü–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")


@router.message(Command("errors"))
async def cmd_errors(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /errors –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –æ—à–∏–±–∫–∞–º–∏
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏
    error_messages = await get_error_messages_count()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    instructions_text = f"""
<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –æ—à–∏–±–∫–∞–º–∏</b>

–°–µ–π—á–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ:
- {error_messages["ai_errors"]} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI
- {error_messages["posting_errors"]} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏ –ø–æ—Å—Ç–∏–Ω–≥–∞
- {error_messages["permanent_errors"]} —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
- <code>list</code> - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏
- <code>retry all</code> - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏
- <code>retry ID</code> - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
- <code>skip ID</code> - –ø–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—à–∏–±–æ—á–Ω–æ–µ
- <code>cancel</code> - –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∞–º–∏

–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?
"""
    await message.answer(instructions_text, parse_mode="HTML")
    await state.set_state(ErrorMessagesStates.waiting_for_action)


@router.message(ErrorMessagesStates.waiting_for_action)
async def process_error_action(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –∏–º–µ—é—â–∏–º–∏ –æ—à–∏–±–∫–∏
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    """
    action = message.text.lower().strip()
    
    if action == "cancel":
        await state.clear()
        await message.answer("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∞–º–∏.")
        return
    
    if action == "list":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏
        error_messages = await get_error_messages_list()
        
        if not error_messages:
            await message.answer("‚úÖ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ—à–∏–±–æ–∫
        messages_text = "<b>üìã –°–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏:</b>\n\n"
        
        for msg in error_messages:
            if msg["status"] == NewsStatus.ERROR_AI_PROCESSING:
                error_type = "‚ùå –û—à–∏–±–∫–∞ AI"
            elif msg["status"] == NewsStatus.ERROR_POSTING:
                error_type = "üì§ –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞"
            elif msg["status"] == NewsStatus.ERROR_PERMANENT:
                error_type = "üö´ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"
            else:
                error_type = "‚ö†Ô∏è –û—à–∏–±–∫–∞"
                
            text_preview = msg["text"][:50] + "..." if len(msg["text"]) > 50 else msg["text"]
            messages_text += f"ID: {msg['id']} - {error_type}\n"
            messages_text += f"–¢–µ–∫—Å—Ç: {text_preview}\n"
            messages_text += f"–ü–æ–ø—ã—Ç–æ–∫: {msg['retry_count']}\n"
            messages_text += f"–ü—Ä–∏—á–∏–Ω–∞: {msg['error_info'][:100]}...\n\n"
        
        messages_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>retry ID</code> –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ <code>skip ID</code> –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞."
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        if len(messages_text) > 4000:
            chunks = [messages_text[i:i+4000] for i in range(0, len(messages_text), 4000)]
            for chunk in chunks:
                await message.answer(chunk, parse_mode="HTML")
        else:
            await message.answer(messages_text, parse_mode="HTML")
        return
    
    if action == "retry all":
        # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        count = await reset_error_messages_status()
        await message.answer(f"‚úÖ {count} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–º–µ—á–µ–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û–Ω–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ.")
        await state.clear()
        return
    
    if action.startswith("retry "):
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            message_id = int(action.replace("retry ", ""))
            # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            success = await reset_message_status(message_id)
            
            if success:
                await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –ø–æ–º–µ—á–µ–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            else:
                await message.answer(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–æ–∫.")
                
            await state.clear()
            return
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
            return
    
    if action.startswith("skip "):
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            message_id = int(action.replace("skip ", ""))
            # –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—à–∏–±–æ—á–Ω–æ–µ
            success = await mark_message_permanent(message_id)
            
            if success:
                await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—à–∏–±–æ—á–Ω–æ–µ.")
            else:
                await message.answer(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–æ–∫.")
                
            await state.clear()
            return
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
            return
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ list, retry all, retry ID, skip ID –∏–ª–∏ cancel.")


@router.message(Command("add_bot_to_channel"))
async def cmd_add_bot_to_channel(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_bot_to_channel –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞
    from config import settings
    bot_token = settings.telegram_bot.bot_token
    bot_username = "–í–∞—à_–±–æ—Ç"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    try:
        from aiogram import Bot
        bot = Bot(token=bot_token)
        bot_info = await bot.get_me()
        bot_username = f"@{bot_info.username}"
        await bot.session.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
    
    instructions_text = f"""
<b>üìù –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª Telegram</b>

–ß—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ, –µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π. –í–æ—Ç –ø–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:

1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π –∫–∞–Ω–∞–ª –≤ Telegram
2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
3. –í—ã–±–µ—Ä–∏—Ç–µ "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã" –∏–ª–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º"
4. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
5. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ {bot_username} –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ
6. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º –ø—Ä–∞–≤–∞:
   - "–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"
   - "–û—Å—Ç–∞–≤–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º"
7. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"

<b>–í–∞–∂–Ω–æ:</b> –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∏–º—è –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @mychannel) –≤–º–µ—Å—Ç–æ ID –∫–∞–Ω–∞–ª–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π, –∞ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100).

<b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å ID –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:</b>
1. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É @getidsbot
2. –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ, –≤–∫–ª—é—á–∞—è –µ–≥–æ ID
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ID –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞

–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
"""
    await message.answer(instructions_text, parse_mode="HTML")
    logger.info(f"–ü–æ–∫–∞–∑–∞–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")


async def get_error_messages_count():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –æ—à–∏–±–æ–∫
    
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏ –ø–æ —Ç–∏–ø–∞–º
    """
    def _get_sync():
        with SessionLocal() as session:
            ai_errors = session.query(Messages).filter(Messages.status == NewsStatus.ERROR_AI_PROCESSING).count()
            posting_errors = session.query(Messages).filter(Messages.status == NewsStatus.ERROR_POSTING).count()
            permanent_errors = session.query(Messages).filter(Messages.status == NewsStatus.ERROR_PERMANENT).count()
            
            return {
                "ai_errors": ai_errors,
                "posting_errors": posting_errors,
                "permanent_errors": permanent_errors
            }
    
    import asyncio
    return await asyncio.to_thread(_get_sync)


async def get_error_messages_list():
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏
    
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –æ—à–∏–±–∫–∞–º–∏
    """
    def _get_sync():
        with SessionLocal() as session:
            query = session.query(Messages).filter(
                (Messages.status == NewsStatus.ERROR_AI_PROCESSING) | 
                (Messages.status == NewsStatus.ERROR_POSTING) |
                (Messages.status == NewsStatus.ERROR_PERMANENT)
            ).order_by(Messages.id.desc()).limit(10)
            
            messages = []
            for msg in query:
                error_info = msg.error_info if hasattr(msg, 'error_info') and msg.error_info else "–ù–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
                
                messages.append({
                    "id": msg.id,
                    "text": msg.text or "(–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞)",
                    "status": msg.status,
                    "retry_count": msg.retry_count,
                    "error_info": error_info
                })
            
            return messages
    
    import asyncio
    return await asyncio.to_thread(_get_sync)


async def reset_error_messages_status():
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    def _update_sync():
        with SessionLocal() as session:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏ AI –Ω–∞ NEW
            ai_errors = session.query(Messages).filter(Messages.status == NewsStatus.ERROR_AI_PROCESSING)
            ai_count = ai_errors.count()
            ai_errors.update({"status": NewsStatus.NEW})
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏ –ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–∞ AI_PROCESSED
            posting_errors = session.query(Messages).filter(Messages.status == NewsStatus.ERROR_POSTING)
            posting_count = posting_errors.count()
            posting_errors.update({"status": NewsStatus.AI_PROCESSED})
            
            session.commit()
            return ai_count + posting_count
    
    import asyncio
    return await asyncio.to_thread(_update_sync)


async def reset_message_status(message_id):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Args:
        message_id (int): ID —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
    """
    def _update_sync():
        with SessionLocal() as session:
            message = session.get(Messages, message_id)
            
            if not message or (message.status != NewsStatus.ERROR_AI_PROCESSING and 
                              message.status != NewsStatus.ERROR_POSTING):
                return False
            
            if message.status == NewsStatus.ERROR_AI_PROCESSING:
                message.status = NewsStatus.NEW
            elif message.status == NewsStatus.ERROR_POSTING:
                message.status = NewsStatus.AI_PROCESSED
                
            session.commit()
            return True
    
    import asyncio
    return await asyncio.to_thread(_update_sync)


async def mark_message_permanent(message_id):
    """
    –ü–æ–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—à–∏–±–æ—á–Ω–æ–µ
    
    Args:
        message_id (int): ID —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –∏–Ω–∞—á–µ False
    """
    def _update_sync():
        with SessionLocal() as session:
            message = session.get(Messages, message_id)
            
            if not message or (message.status != NewsStatus.ERROR_AI_PROCESSING and 
                              message.status != NewsStatus.ERROR_POSTING):
                return False
            
            message.status = NewsStatus.ERROR_PERMANENT
            session.commit()
            return True
    
    import asyncio
    return await asyncio.to_thread(_update_sync) 