import logging
import asyncio
import re

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# –ò–º–ø–æ—Ä—Ç Telethon –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
from telethon import TelegramClient
from telethon.errors import PhoneNumberInvalidError, SessionPasswordNeededError, PhoneCodeInvalidError, PhoneCodeExpiredError, SessionExpiredError
from telethon.sessions import StringSession

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
from config import settings

# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from database.repositories import parsing_telegram_acc_repository as pt_repo
from database.dao.pars_telegram_acc_repository import ParsingTelegramAccRepository

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞
from telegram.parser.parser_service import trigger_update

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

router = Router()

#######################################################################
#                       FSM States                                    #
#######################################################################
class AddAccountStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()

#######################################################################
#                   Account Management Commands                       #
#######################################################################
@router.message(Command("add_account"))
async def cmd_add_account(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram."""
    await message.answer(
        "üì± <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ!</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç Telegram, –∞ –Ω–µ —Ç–æ—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Å–µ–π—á–∞—Å –æ–±—â–∞–µ—Ç–µ—Å—å —Å –±–æ—Ç–æ–º. –≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏ —Ä–∞–±–æ—Ç—ã Telegram API.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–≤–∫–ª—é—á–∞—è –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>+79123456789</code>",
        parse_mode="HTML"
    )
    await state.set_state(AddAccountStates.waiting_for_phone)

@router.message(AddAccountStates.waiting_for_phone)
async def process_phone_number(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    phone_number = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not re.match(r'^\+\d{10,15}$', phone_number):
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞</b>\n\n"
            "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+' –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /cancel",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.update_data(phone_number=phone_number)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
    existing_account = await asyncio.to_thread(
        lambda: pt_repo.get_account_by_phone(phone_number)
    )
    
    if existing_account:
        await message.answer(
            "‚ö†Ô∏è <b>–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n"
            f"–ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ /delete_account",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        client = TelegramClient(
            StringSession(), 
            settings.telegram_api.api_id,
            settings.telegram_api.api_hash
        )
        
        await client.connect()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await client.send_code_request(phone_number)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –≤ FSM –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.update_data(client=client)
        
        await message.answer(
            "‚úÖ <b>–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>\n\n"
            "–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):",
            parse_mode="HTML"
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é - –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞
        await state.set_state(AddAccountStates.waiting_for_code)
        
    except PhoneNumberInvalidError:
        await message.answer(
            "‚ùå <b>–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
            "Telegram —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä –∫–∞–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.",
            parse_mode="HTML"
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.",
            parse_mode="HTML"
        )
        await state.clear()

@router.message(AddAccountStates.waiting_for_code)
async def process_verification_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    code = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–¥–∞
    if not re.match(r'^\d{5}$', code):
        await message.answer(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞</b>\n\n"
            "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 —Ü–∏—Ñ—Ä.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /cancel",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    phone_number = state_data.get("phone_number")
    client = state_data.get("client")
    
    if not client:
        logger.error("–ö–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.\n"
            "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /add_account",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
        await message.answer(
            "‚è≥ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API Telegram.",
            parse_mode="HTML"
        )
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
            await client.sign_in(phone_number, code)
            
            # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
            string_session = StringSession.save(client.session)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            account_info = await asyncio.to_thread(
                lambda: pt_repo.add_account(phone_number, string_session)
            )
            
            if account_info == "exists":
                await message.answer(
                    "‚ö†Ô∏è <b>–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n"
                    f"–ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.",
                    parse_mode="HTML"
                )
            elif account_info:
                await message.answer(
                    "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
                    f"–ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                    f"ID –∞–∫–∫–∞—É–Ω—Ç–∞: {account_info['id']}",
                    parse_mode="HTML"
                )
                
                # –ï—Å–ª–∏ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
                all_accounts = await asyncio.to_thread(pt_repo.get_all_accounts)
                if len(all_accounts) == 1:
                    await asyncio.to_thread(lambda: pt_repo.set_active_status(account_info['id'], True))
                    await message.answer(
                        "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                        "–¢–∞–∫ –∫–∞–∫ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, –æ–Ω –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π.",
                        parse_mode="HTML"
                    )
                    
                    # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
                    trigger_update()
                    logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone_number}")
            else:
                await message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
                    "–ê–∫–∫–∞—É–Ω—Ç –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
                    parse_mode="HTML"
                )
                
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            await state.clear()
            
        except SessionPasswordNeededError:
            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è 2FA, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            await message.answer(
                "üîê <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</b>\n\n"
                "–ù–∞ —ç—Ç–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
                parse_mode="HTML"
            )
            await state.set_state(AddAccountStates.waiting_for_password)
            
    except PhoneCodeInvalidError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b>\n\n"
            "–í–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )
    except PhoneCodeExpiredError:
        await message.answer(
            "‚ùå <b>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫</b>\n\n"
            "–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /add_account",
            parse_mode="HTML"
        )
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.",
            parse_mode="HTML"
        )
        await state.clear()

@router.message(AddAccountStates.waiting_for_password)
async def process_2fa_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    password = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    phone_number = state_data.get("phone_number")
    client = state_data.get("client")
    
    if not client:
        logger.error("–ö–ª–∏–µ–Ω—Ç Telethon –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.\n"
            "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /add_account",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –ø–∞—Ä–æ–ª–µ–º 2FA
        await message.answer(
            "‚è≥ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA...</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è.",
            parse_mode="HTML"
        )
        
        await client.sign_in(password=password)
        
        # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        string_session = StringSession.save(client.session)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        account_info = await asyncio.to_thread(
            lambda: pt_repo.add_account(phone_number, string_session)
        )
        
        if account_info == "exists":
            await message.answer(
                "‚ö†Ô∏è <b>–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n"
                f"–ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π.",
                parse_mode="HTML"
            )
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Å—Å–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å
            trigger_update()
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {phone_number}")
        elif account_info:
            await message.answer(
                "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
                f"–ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É.\n"
                f"ID –∞–∫–∫–∞—É–Ω—Ç–∞: {account_info['id']}",
                parse_mode="HTML"
            )
            
            # –ï—Å–ª–∏ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
            all_accounts = await asyncio.to_thread(pt_repo.get_all_accounts)
            if len(all_accounts) == 1:
                await asyncio.to_thread(lambda: pt_repo.set_active_status(account_info['id'], True))
                await message.answer(
                    "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                    "–¢–∞–∫ –∫–∞–∫ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, –æ–Ω –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π.",
                    parse_mode="HTML"
                )
                
                # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
                trigger_update()
                logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ {phone_number}")
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
                "–ê–∫–∫–∞—É–Ω—Ç –±—ã–ª –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è 2FA: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–∞—Ä–æ–ª–µ–º 2FA: {str(e)}\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥—ã /add_account",
            parse_mode="HTML"
        )
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await client.disconnect()
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    current_state = await state.get_state()
    
    if current_state is None:
        await message.answer(
            "ü§∑‚Äç‚ôÇÔ∏è <b>–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å</b>\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∏–∫–∞–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç Telethon
    state_data = await state.get_data()
    client = state_data.get("client")
    
    if client:
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            await client.disconnect()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Telethon: {e}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await message.answer(
        "‚úÖ <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–í—Å–µ —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.",
        parse_mode="HTML"
    )

#######################################################################
#                 Account View Commands                              #
#######################################################################
@router.message(Command("view_accounts"))
async def cmd_view_accounts(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = await asyncio.to_thread(pt_repo.get_all_accounts)
        
        if not accounts:
            await message.answer(
                "‚ÑπÔ∏è <b>–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç</b>\n\n"
                "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_account –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
                parse_mode="HTML"
            )
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        account_list = "\n\n".join([
            f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç #{account['id']}</b>\n"
            f"–ù–æ–º–µ—Ä: <code>{account['phone_number']}</code>\n"
            f"–°—Ç–∞—Ç—É—Å: <code>{'–ê–∫—Ç–∏–≤–µ–Ω' if account['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}</code>"
            for account in accounts
        ])
        
        await message.answer(
            f"üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n{account_list}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

#######################################################################
#                 Account Delete Commands                             #
#######################################################################
@router.message(Command("delete_account"))
async def cmd_delete_account(message: Message):
    """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ –µ–≥–æ ID."""
    command_parts = message.text.split()
    
    if len(command_parts) != 2:
        await message.answer(
            "‚ÑπÔ∏è <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É</b>\n\n"
            "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "<code>/delete_account ID</code>\n\n"
            "–ì–¥–µ ID - —ç—Ç–æ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ /view_accounts",
            parse_mode="HTML"
        )
        return
        
    try:
        account_id = int(command_parts[1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        account = await asyncio.to_thread(lambda: pt_repo.get_account_by_id(account_id))
        
        if not account:
            await message.answer(
                "‚ö†Ô∏è <b>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                parse_mode="HTML"
            )
            return
            
        # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        success = await asyncio.to_thread(lambda: pt_repo.delete_account(account_id))
        
        if success:
            await message.answer(
                "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω</b>\n\n"
                f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
                parse_mode="HTML"
            )
            
            # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
            if account.get('is_active', False):
                trigger_update()
                logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
        else:
            await message.answer(
                "‚ö†Ô∏è <b>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.",
                parse_mode="HTML"
            )
            
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
@router.message(Command("activate_account"))
async def cmd_activate_account(message: Message):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ –µ–≥–æ ID."""
    command_parts = message.text.split()
    
    if len(command_parts) != 2:
        await message.answer(
            "‚ÑπÔ∏è <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É</b>\n\n"
            "–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "<code>/activate_account ID</code>\n\n"
            "–ì–¥–µ ID - —ç—Ç–æ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ /view_accounts",
            parse_mode="HTML"
        )
        return
        
    try:
        account_id = int(command_parts[1])
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π
        async def _deactivate_all_and_activate_one():
            # –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            all_accounts = pt_repo.get_all_accounts()
            for acc in all_accounts:
                if acc['is_active'] and acc['id'] != account_id:
                    pt_repo.set_active_status(acc['id'], False)
            
            # –ó–∞—Ç–µ–º –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            success = pt_repo.set_active_status(account_id, True)
            return success, pt_repo.get_account_by_id(account_id)
            
        success, account = await asyncio.to_thread(_deactivate_all_and_activate_one)
        
        if success and account:
            await message.answer(
                "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                f"–ê–∫–∫–∞—É–Ω—Ç <code>{account['phone_number']}</code> (ID: {account_id}) —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
                "–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.",
                parse_mode="HTML"
            )
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
            trigger_update()
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
        else:
            await message.answer(
                "‚ö†Ô∏è <b>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
                parse_mode="HTML"
            )
            
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

@router.message(Command("deactivate_account"))
async def cmd_deactivate_account(message: Message):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ –µ–≥–æ ID."""
    command_parts = message.text.split()
    
    if len(command_parts) != 2:
        await message.answer(
            "‚ÑπÔ∏è <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É</b>\n\n"
            "–î–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "<code>/deactivate_account ID</code>\n\n"
            "–ì–¥–µ ID - —ç—Ç–æ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ /view_accounts",
            parse_mode="HTML"
        )
        return
        
    try:
        account_id = int(command_parts[1])
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
        async def _deactivate_account():
            success = pt_repo.set_active_status(account_id, False)
            return success, pt_repo.get_account_by_id(account_id)
            
        success, account = await asyncio.to_thread(_deactivate_account)
        
        if success and account:
            await message.answer(
                "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                f"–ê–∫–∫–∞—É–Ω—Ç <code>{account['phone_number']}</code> (ID: {account_id}) —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
                parse_mode="HTML"
            )
            
            # –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
            trigger_update()
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
        else:
            await message.answer(
                "‚ö†Ô∏è <b>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
                parse_mode="HTML"
            )
            
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

