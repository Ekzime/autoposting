import logging
import asyncio
import re

# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

# –ò–º–ø–æ—Ä—Ç Telethon –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
from telethon import TelegramClient
from telethon.errors import PhoneNumberInvalidError, SessionPasswordNeededError, PhoneCodeInvalidError, PhoneCodeExpiredError, SessionExpiredError
from telethon.sessions import StringSession

# –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
from config import settings

# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from database.repositories import parsing_telegram_acc_repository as pt_repo

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

router = Router()

#######################################################################
#                       FSM States                                    #
#######################################################################
class AddAccountStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()

#######################################################################
#                   Account Management Commands                       #
#######################################################################

@router.message(Command("add_account"))
async def cmd_add_account(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞."""
    try:
        await message.answer(
            "üì± <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>+79123456789</code>\n\n"
            "<i>–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram API –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–∞–Ω–∞–ª–æ–≤.</i>\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ <code>skip</code>",
            parse_mode="HTML"
        )
        
        await state.set_state(AddAccountStates.waiting_for_phone)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        await state.clear()


@router.message(AddAccountStates.waiting_for_phone, F.text.lower() == "skip")
async def cancel_add_account(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω
    data = await state.get_data()
    account_id = data.get("account_id")
    
    # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if account_id:
        await asyncio.to_thread(lambda: pt_repo.delete_account(account_id))
        logger.info(f"–£–¥–∞–ª–µ–Ω –Ω–µ–¥–æ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å ID {account_id}")
    
    await message.answer(
        "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        parse_mode="HTML"
    )
    await state.clear()


@router.message(AddAccountStates.waiting_for_phone)
async def process_phone_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    raw_phone = message.text.strip()
    
    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –≤—Å–µ—Ö –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    digits_only = re.sub(r'[^0-9]', '', raw_phone)
    
    # –î–æ–±–∞–≤–ª—è–µ–º + –≤ –Ω–∞—á–∞–ª–æ
    phone_number = '+' + digits_only
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä –ø–æ—Å–ª–µ +)
    if len(digits_only) < 10 or len(digits_only) > 15:
        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>+79123456789</code>\n\n"
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 15 (–Ω–µ —Å—á–∏—Ç–∞—è +).\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ <code>skip</code>",
            parse_mode="HTML"
        )
        return
    
    logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number} –∏–∑ –≤–≤–æ–¥–∞: {raw_phone}")
    await process_phone_number(message, state, phone_number)


async def process_phone_number(message: Message, state: FSMContext, phone_number: str):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
        account_exists = await asyncio.to_thread(
            lambda: any(account['phone_number'] == phone_number for account in pt_repo.get_all_accounts())
        )
        
        if account_exists:
            await message.answer(
                "‚ö†Ô∏è <b>–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>\n\n"
                f"–ê–∫–∫–∞—É–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.",
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞
        await message.answer(
            "‚è≥ <b>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞...</b>\n\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{phone_number}</code>",
            parse_mode="HTML"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        client = TelegramClient(StringSession(), settings.telegram_api.api_id, settings.telegram_api.api_hash)
        
        try:
            await client.connect()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç
            if await client.is_user_authorized():
                await handle_already_authorized_client(client, message, state, phone_number)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            send_code_result = await client.send_code_request(phone_number)
            phone_code_hash = send_code_result.phone_code_hash
            temp_session_string = await client.export_session_string()
            
            logger.info(f"–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(
                phone_number=phone_number,
                phone_code_hash=phone_code_hash,
                temp_session_string=temp_session_string
            )
            
            await message.answer(
                "‚úÖ <b>–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</b>\n\n"
                f"–ù–∞ –Ω–æ–º–µ—Ä {phone_number} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>12345</code>.\n\n"
                "<i>‚ö†Ô∏è –í–ê–ñ–ù–û: –ù–µ –≤—ã—Ö–æ–¥–∏—Ç–µ –∏–∑ —á–∞—Ç–∞ –±–æ—Ç–∞! –ñ–¥–∏—Ç–µ –∫–æ–¥ –∏ —Å—Ä–∞–∑—É –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å.</i>",
                parse_mode="HTML"
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –∫–æ–¥–∞
            await state.set_state(AddAccountStates.waiting_for_code)
            
        except PhoneNumberInvalidError:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞</b>\n\n"
                "Telegram API –Ω–µ –º–æ–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤–∫–ª—é—á–∞—è –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã.",
                parse_mode="HTML"
            )
            await state.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram API –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}: {e}")
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}.\n"
                f"–û—à–∏–±–∫–∞: {str(e)[:100]}...\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            await state.clear()
            
        finally:
            if client:
                await client.disconnect()
            
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number}: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–º–µ—Ä {phone_number}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        await state.clear()


async def handle_already_authorized_client(client: TelegramClient, message: Message, state: FSMContext, phone_number: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        me = await client.get_me()
        session_string = await client.export_session_string()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î
        account_id = await asyncio.to_thread(
            lambda: add_account_to_db(phone_number, session_string)
        )
        
        if account_id:
            await message.answer(
                "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</b>\n\n"
                f"–ê–∫–∫–∞—É–Ω—Ç {phone_number} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
                f"‚úÖ ID –∞–∫–∫–∞—É–Ω—Ç–∞: <code>{account_id}</code>\n"
                f"‚úÖ Telegram ID: <code>{me.id}</code>\n"
                f"‚úÖ –°—Ç–∞—Ç—É—Å: <code>–∞–∫—Ç–∏–≤–µ–Ω</code>",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ö†Ô∏è <b>–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –ë–î</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
            parse_mode="HTML"
        )
    finally:
        await state.clear()
        if client:
            await client.disconnect()


@router.message(AddAccountStates.waiting_for_code, F.text.lower() == "skip")
async def cancel_add_code(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞."""
    await message.answer(
        "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        parse_mode="HTML"
    )
    await state.clear()


@router.message(AddAccountStates.waiting_for_code)
async def process_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    code = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ (–æ–±—ã—á–Ω–æ 5 —Ü–∏—Ñ—Ä)
    if not code.isdigit() or len(code) != 5:
        await message.answer(
            "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞</b>\n\n"
            "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )
        return
        
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    phone_number = data.get("phone_number")
    phone_code_hash = data.get("phone_code_hash")
    temp_session_string = data.get("temp_session_string")
    
    if not phone_code_hash or not temp_session_string:
        logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
    await verify_code_and_add_account(
        message=message,
        state=state,
        phone_number=phone_number,
        code=code,
        phone_code_hash=phone_code_hash,
        temp_session_string=temp_session_string
    )


async def verify_code_and_add_account(message: Message, state: FSMContext, 
                                     phone_number: str, code: str, 
                                     phone_code_hash: str, temp_session_string: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î."""
    client = None
    try:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å–µ—Å—Å–∏–∏
        client = TelegramClient(
            StringSession(temp_session_string), 
            settings.telegram_api.api_id, 
            settings.telegram_api.api_hash
        )
        
        await client.connect()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
        await client.sign_in(phone=phone_number, code=code, phone_code_hash=phone_code_hash)
        
        # –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î
        await handle_successful_auth(client, message, state, phone_number)
        
    except SessionPasswordNeededError:
        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è 2FA
        session_string = await client.export_session_string() if client else temp_session_string
        await handle_2fa_required(message, state, session_string)
        
    except (PhoneCodeInvalidError, PhoneCodeExpiredError, SessionExpiredError) as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await handle_code_error(e, message, state, phone_number)
        
    except Exception as e:
        # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –∫–æ–¥–æ–º –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞: {str(e)[:100]}...\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /add_account.",
            parse_mode="HTML"
        )
        await state.clear()
        
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
        if client:
            await client.disconnect()


async def handle_successful_auth(client: TelegramClient, message: Message, 
                                state: FSMContext, phone_number: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."""
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session_string = await client.export_session_string()
        me = await client.get_me()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î
        account_id = await asyncio.to_thread(
            lambda: add_account_to_db(phone_number, session_string)
        )
        
        if not account_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        await message.answer(
            "üéâ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"–ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.\n\n"
            f"‚úÖ ID –∞–∫–∫–∞—É–Ω—Ç–∞: <code>{account_id}</code>\n"
            f"‚úÖ Telegram ID: <code>{me.id}</code>\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: <code>–∞–∫—Ç–∏–≤–µ–Ω</code>",
            parse_mode="HTML"
        )
            
        await state.clear()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
            "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
        await state.clear()


def add_account_to_db(phone_number: str, session_string: str) -> int:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID."""
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
    new_account = pt_repo.add_account(
        phone_number=phone_number,
        session_string=session_string
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω
    if new_account and new_account != "exists":
        account_id = new_account.id
        pt_repo.set_active_status(account_id, True)
        return account_id
    return None


async def handle_2fa_required(message: Message, state: FSMContext, session_string: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è."""
    logger.info("–¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞")
    await message.answer(
        "üîê <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</b>\n\n"
        "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(temp_session_string=session_string)
    await state.set_state(AddAccountStates.waiting_for_password)


async def handle_code_error(error: Exception, message: Message, state: FSMContext, phone_number: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    error_messages = {
        PhoneCodeInvalidError: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
        PhoneCodeExpiredError: "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /add_account.",
        SessionExpiredError: "–°–µ—Å—Å–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /add_account."
    }
    
    error_type = type(error)
    logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}: {error_type.__name__}")
    
    # –î–ª—è –∏—Å—Ç–µ–∫—à–µ–≥–æ –∫–æ–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–≤–µ—Ç—ã
    extra_message = ""
    if error_type == PhoneCodeExpiredError:
        extra_message = "\n\n<i>–°–æ–≤–µ—Ç: –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –ù–ï –í–´–•–û–î–ò–¢–ï –∏–∑ —á–∞—Ç–∞ –±–æ—Ç–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –∫–æ–¥ –∏ —Å—Ä–∞–∑—É –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ.</i>"
    
    await message.answer(
        f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n{error_messages.get(error_type)}{extra_message}",
        parse_mode="HTML"
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤ –∏ —Å–µ—Å—Å–∏–π
    if error_type in (PhoneCodeExpiredError, SessionExpiredError):
        await state.clear()


@router.message(AddAccountStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    password = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    phone_number = data.get("phone_number")
    temp_session_string = data.get("temp_session_string")
    
    if not temp_session_string:
        logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è 2FA –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è 2FA. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    client = None
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telegram –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        client = TelegramClient(
            StringSession(temp_session_string), 
            settings.telegram_api.api_id, 
            settings.telegram_api.api_hash
        )
        await client.connect()
        
        # –í—Ö–æ–¥–∏–º —Å –ø–∞—Ä–æ–ª–µ–º
        await client.sign_in(password=password)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        session_string = await client.export_session_string()
        me = await client.get_me()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ –ë–î
        account_id = await asyncio.to_thread(
            lambda: add_account_to_db(phone_number, session_string)
        )
        
        if not account_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        await message.answer(
            "üéâ <b>–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"–ê–∫–∫–∞—É–Ω—Ç {phone_number} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.\n\n"
            f"‚úÖ ID –∞–∫–∫–∞—É–Ω—Ç–∞: <code>{account_id}</code>\n"
            f"‚úÖ Telegram ID: <code>{me.id}</code>\n"
            f"‚úÖ –°—Ç–∞—Ç—É—Å: <code>–∞–∫—Ç–∏–≤–µ–Ω</code>",
            parse_mode="HTML"
        )
            
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ —Å –ø–∞—Ä–æ–ª–µ–º 2FA: {e}")
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</b>\n\n"
            "–í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )
        
    finally:
        if client:
            await client.disconnect()


#######################################################################
#                 Account View Commands                              #
#######################################################################
@router.message(Command("view_accounts"))
async def cmd_view_accounts(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = await asyncio.to_thread(pt_repo.get_all_accounts)
        
        if not accounts:
            await message.answer(
                "‚ÑπÔ∏è <b>–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç</b>\n\n"
                "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_account –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.",
                parse_mode="HTML"
            )
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        account_list = "\n\n".join([
            f"üì± <b>–ê–∫–∫–∞—É–Ω—Ç #{account['id']}</b>\n"
            f"–ù–æ–º–µ—Ä: <code>{account['phone_number']}</code>\n"
            f"–°—Ç–∞—Ç—É—Å: <code>{'–ê–∫—Ç–∏–≤–µ–Ω' if account['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}</code>"
            for account in accounts
        ])
        
        await message.answer(
            f"üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</b>\n\n{account_list}",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

#######################################################################
#                 Account Delete Commands                             #
#######################################################################
@router.message(Command("delete_account"))
async def cmd_delete_account(message: Message):
    """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ –µ–≥–æ ID."""
    command_parts = message.text.split()
    
    if len(command_parts) != 2:
        await message.answer(
            "‚ÑπÔ∏è <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É</b>\n\n"
            "–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "<code>/delete_account ID</code>\n\n"
            "–ì–¥–µ ID - —ç—Ç–æ –Ω–æ–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ /view_accounts",
            parse_mode="HTML"
        )
        return
        
    try:
        account_id = int(command_parts[1])
        
        # –£–¥–∞–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        success = await asyncio.to_thread(lambda: pt_repo.delete_account(account_id))
        
        if success:
            await message.answer(
                "‚úÖ <b>–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω</b>\n\n"
                f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ö†Ô∏è <b>–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.",
                parse_mode="HTML"
            )
            
    except ValueError:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "ID –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}")
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

