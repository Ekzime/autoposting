###############################
#           system libs
#------------------------------
import re
import json
from typing import List, Optional, Dict, Any, Union
###############################
#           my moduls
#------------------------------
from .prompts import prompt
from config import settings
###############################
#            FAST API
#------------------------------
from fastapi import FastAPI, APIRouter
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
###############################
#       other libs/frameworks
#------------------------------
import google.generativeai as genai

# Configure Gemini API
genai.configure(api_key=settings.ai_service.gemini_key)
model = genai.GenerativeModel("gemini-1.5-flash")

# –ú–æ–¥–µ–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
class PostBatch(BaseModel):
    posts: List[str]
    has_image: Optional[bool] = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.add_middleware(
    CORSMiddleware,
    allow_origins=    ["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –ª—é–±—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    allow_methods=    ["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ HTTP –º–µ—Ç–æ–¥—ã
    allow_headers=    ["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    allow_credentials=True,   # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Gemini API
def process_posts(posts: list[str], has_image: bool = False, prompt_template: str = prompt) -> list[str]:
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç, –¥–æ–±–∞–≤–ª—è—è –ø–æ—Å—Ç—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
    content = prompt_template + "\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if has_image:
        content += "–í–ê–ñ–ù–û: –ö —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ—Å—Ç.\n\n"
    
    content += "\n".join(f"- {p}" for p in posts)

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API
        response = model.generate_content(content)
        raw = response.text.strip()

        # –í—ã–≤–æ–¥–∏–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("üì• GEMINI RAW RESPONSE:")
        print(raw)

        # 1. –ï—Å–ª–∏ markdown-–æ–±—ë—Ä—Ç–∫–∞ ```json ... ```, –≤—ã—Ä–µ–∑–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        match = re.search(r"```(?:json)?\s*(\[.*?\])\s*```", raw, re.DOTALL)
        if match:
            return json.loads(match.group(1))

        # 2. –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤ –±–µ–∑ markdown
        if raw.startswith("[") and raw.endswith("]"):
            return json.loads(raw)

        # 3. –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî —Ä–∞—Å–ø–∞—Ä—Å–∏–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
        lines = raw.splitlines()
        return [line.strip("-‚Ä¢ ").strip() for line in lines if line and not line.startswith("–í–æ—Ç")]

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        print(f"‚ùå Gemini Error: {e}")
        return []


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
@app.post('/gemini/filter')
async def multi_filter(data: PostBatch):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = process_posts(posts=data.posts, has_image=data.has_image)
    return {
        'status': 'success',
        'result': result,
    }
