from database.models import engine
from sqlalchemy import text
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_to_bigint():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª–µ–π peer_id –∏ channel_id –Ω–∞ BigInteger"""
    
    migration_queries = [
        # –®–∞–≥ 1: –£–¥–∞–ª—è–µ–º foreign key constraint
        "ALTER TABLE messages DROP FOREIGN KEY messages_ibfk_1",
        
        # –®–∞–≥ 2: –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –ø–æ–ª—è peer_id –≤ —Ç–∞–±–ª–∏—Ü–µ channels
        "ALTER TABLE channels MODIFY COLUMN peer_id BIGINT",
        
        # –®–∞–≥ 3: –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –ø–æ–ª—è channel_id –≤ —Ç–∞–±–ª–∏—Ü–µ messages 
        "ALTER TABLE messages MODIFY COLUMN channel_id BIGINT",
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º foreign key constraint –æ–±—Ä–∞—Ç–Ω–æ
        "ALTER TABLE messages ADD CONSTRAINT messages_ibfk_1 FOREIGN KEY (channel_id) REFERENCES channels (peer_id)"
    ]
    
    try:
        with engine.begin() as connection:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")
            
            for i, query in enumerate(migration_queries, 1):
                logger.info(f"üìù –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å {i}/{len(migration_queries)}: {query}")
                connection.execute(text(query))
                logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i} –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise

def test_migration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é - –ø—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —Å –±–æ–ª—å—à–∏–º peer_id"""
    from database.models import SessionLocal, Channels
    
    session = SessionLocal()
    try:
        # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —Å –±–æ–ª—å—à–∏–º peer_id
        test_peer_id = 2310347474
        test_channel = Channels(
            peer_id=test_peer_id,
            title="Test Big Peer ID Channel"
        )
        
        session.add(test_channel)
        session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        saved_channel = session.query(Channels).filter(
            Channels.peer_id == test_peer_id
        ).first()
        
        if saved_channel and saved_channel.peer_id == test_peer_id:
            logger.info(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª! –ö–∞–Ω–∞–ª —Å peer_id={test_peer_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
            session.delete(saved_channel)
            session.commit()
            logger.info("üßπ –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω")
            
        else:
            logger.error("‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω! –ö–∞–Ω–∞–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º peer_id")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        session.rollback()
    finally:
        session.close()

if __name__ == "__main__":
    print("üîß –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª–µ–π peer_id –∏ channel_id –Ω–∞ BigInteger")
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backup —Å–æ–∑–¥–∞–Ω!")
    
    confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (yes/no): ")
    if confirm.lower() in ['yes', 'y', '–¥–∞', '–¥']:
        migrate_to_bigint()
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∏–≥—Ä–∞—Ü–∏—é...")
        test_migration()
    else:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞") 